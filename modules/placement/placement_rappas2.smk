"""
This module makes placements with RAPPAS2
"""

__author__ = "Nikolai Romashchenko"


rule aronly_rappas:
    """
    Runs RAPPAS with --aronly option. 
    This step is required until RAPPASv2 supports ancestral reconstruction by its own.
    """
    input:
        a = config["workdir"] + "/A/{pruning}.align",
        t = config["workdir"] + "/T/{pruning}.tree",
        arseq = config["workdir"] + "/RAPPAS/{pruning}/red{reduction}_ar{arsoft}/AR/extended_align.phylip_phyml_ancestral_seq.txt",
        artree = config["workdir"] + "/RAPPAS/{pruning}/red{reduction}_ar{arsoft}/AR/extended_align.phylip_phyml_ancestral_tree.txt",
    output:
        ext_mapping = config["workdir"] + "/RAPPAS/{pruning}/red{reduction}_ar{arsoft}/extended_trees/extended_tree_node_mapping.tsv",
        ar_mapping = config["workdir"] + "/RAPPAS/{pruning}/red{reduction}_ar{arsoft}/AR/ARtree_id_mapping.tsv"
    log:
        config["workdir"] + "/logs/aronly_rappas2/{pruning}_red{reduction}_ar{arsoft}.log"
    benchmark:
        repeat(config["workdir"] + "/benchmarks/{pruning}_red{reduction}_ar{arsoft}_rappas-dbbuild_benchmark.tsv", config["repeats"])
    version:
        "1.00"
    params:
        states = ["nucl"] if config["states"] == 0 else ["amino"],
        ardir = lambda wildcards: config["workdir"] + "/RAPPAS/{0}/red{1}_ar{2}/AR" % (str(wildcards.pruning), str(wildcards.reduction), wildcards.arsoft),
        workdir = lambda wildcards: config["workdir"] + "/RAPPAS/{0}/red{1}_ar{2}/k{3}_o{4}" % (wildcards.pruning, wildcards.reduction, wildcards.arsoft, wildcards.k, wildcards.omega),
    run:
         shell(
            "java -Xms2G -Xmx" + str(config["config_rappas"]["memory"]) + "G -jar $(which RAPPAS.jar) -p b -b $(which phyml) "
            "-k {wildcards.k} --omega {wildcards.omega} -t {input.t} -r {input.a} "
            "-w {params.workdir} --ardir {params.ardir} -s {params.states} --ratio-reduction {wildcards.reduction} "
            "--use_unrooted --aronly &> {log} "
         )

# Usage of the rappas-buildn:
# rappas-buildn
# -t tree.newick:
# -x extended_tree_withBL.tree
# -a extended_align.phylip_phyml_ancestral_seq.txt
# -e extended_tree_node_mapping.tsv
# -m ARtree_id_mapping.tsv
# -w working_dir
# -k kmer_size
# -o omega
# -j num_threds

rule dbbuild_rappas2:
    """
    Builds a database using RAPPAS2.
    """
    input:
        t=config["workdir"]+"/T/{pruning}.tree",
        x=config["workdir"]+"/RAPPAS/{pruning}/red{reduction}_ar{arsoft}/extended_trees/extended_tree_withBL.tree",
        arseq=config["workdir"]+"/RAPPAS/{pruning}/red{reduction}_ar{arsoft}/AR/extended_align.phylip_phyml_ancestral_seq.txt",
        ext_mapping=config["workdir"]+"/RAPPAS/{pruning}/red{reduction}_ar{arsoft}/extended_trees/extended_tree_node_mapping.tsv",
        ar_mapping=config["workdir"]+"/RAPPAS/{pruning}/red{reduction}_ar{arsoft}/AR/ARtree_id_mapping.tsv"
    output:
        q=config["workdir"]+"/RAPPAS2/{pruning}/red{reduction}_ar{arsoft}/k{k}_o{omega}/DB_k{k}_o{omega}.rps"
    log:
        config["workdir"]+"/logs/dbbuild_rappas2/{pruning}_k{k}_o{omega}_red{reduction}_ar{arsoft}.log"
    benchmark:
        repeat(config["workdir"]+"/benchmarks/{pruning}_k{k}_o{omega}_red{reduction}_ar{arsoft}_rappas-dbbuild_benchmark.tsv", config["repeats"])
    version:
        "1.00"
    params:
        tmpdir=config["workdir"]+"/RAPPAS2/{pruning}/red{reduction}_ar{arsoft}/k{k}_o{omega}"
    run:
        shell(
            "rappas-buildn "
            "-t {input.t} -x {input.x} -a {input.arseq} -e {input.ext_mapping} -m {input.ar_mapping} "
            "-w {params.tmpdir} -k {wildcards.k} -o {wildcards.omega} -j 1 &> {log}"
        )

def set_rappas2_input_reads(pruning):
    """
    Creates a list of input read files.
    """
    # reads are taken from the input
    if "dataset_reads" in config:
        return [config["dataset_reads"]]
    # reads are generated by pruning the input tree
    else:
        return [os.path.join(config["workdir"], "R", + pruning + "_r{length}.fasta")]


def set_rappas2_output():
    """
    Creates a list of output files.
    """

    # reads are taken from the input
    if "dataset_reads" in config:
        return [config["workdir"]+"/RAPPAS2/{pruning}/red{reduction}_ar{arsoft}/k{k}_o{omega}/{pruning}" +
                "_k{k}_o{omega}_red{reduction}_ar{arsoft}_rappas.jplace"]
    # reads are generated by pruning the input tree
    else:
        return [config["workdir"]+"/RAPPAS2/{pruning}/red{reduction}_ar{arsoft}/k{k}_o{omega}/{pruning}" +
                "_r{length}_k{k}_o{omega}_red{reduction}_ar{arsoft}_rappas.jplace"]

def set_rappas2_log():
    """
    Creates a list of log files.
    """

    # reads are taken from the input
    if "dataset_reads" in config:
        return [config["workdir"] + "/logs/placement_rappas2/{pruning}/red{reduction}_ar{arsoft}/k{k}_o{omega}" +
               "/{pruning}_full_k{k}_o{omega}_red{reduction}_ar{arsoft}.log"]
    # reads are generated by pruning the input tree
    else:
        return [config["workdir"] + "/logs/placement_rappas2/{pruning}/red{reduction}_ar{arsoft}/k{k}_o{omega}" +
               "/{pruning}_r{length}_k{k}_o{omega}_red{reduction}_ar{arsoft}.log"]

#def set_benchmark():
#    """
#    Creates a list of benchmark output files.
#    """
#    if "dataset_reads" in config:
#        return [config["workdir"] + "/benchmarks/{pruning}_full_k{k}_o{omega}_red{reduction}" +
#                "_ar{arsoft}_rappas-placement_benchmark.tsv" for _ in range(config["repeats"])]
#    else:
#        return [config["workdir"] + "/benchmarks/{pruning}_r{length}_k{k}_o{omega}_red{reduction}" +
#                "_ar{arsoft}_rappas-placement_benchmark.tsv" for _ in range(config["repeats"])]

rule placement_rappas2:
    """
    Places reads using RAPPAS2.
    """
    input:
        db = config["workdir"] + "/RAPPAS2/{pruning}/red{reduction}_ar{arsoft}/k{k}_o{omega}/DB_k{k}_o{omega}.rps",
        r = lambda wildcards: set_rappas2_input_reads(wildcards.pruning)
    output:
        set_rappas2_output()
    log:
        set_rappas2_log()
    #benchmark:
        #set_benchmark()
    version: "1.00"
    params:
        workdir=config["workdir"]+"/RAPPAS2/{pruning}/red{reduction}_ar{arsoft}/k{k}_o{omega}",
    run:
        shell(
            "rappas-placen {input.db} {params.workdir} 1 {input.r} &> {log}"
        )

        # reads are taken from the input
        if "dataset_reads" in config:
            shell(
                "mv {params.workdir}/placements_{wildcards.pruning}.fasta.jplace "
                "{params.workdir}/{wildcards.pruning}_k{wildcards.k}_o{wildcards.omega}_red{wildcards.reduction}_ar{wildcards.arsoft}_rappas.jplace"
            )
        # reads are generated by pruning the input tree
        else:
            for length in config["read_length"]:
                shell(
                    "mv {params.workdir}/placements_{wildcards.pruning}_r"+str(length)+".fasta.jplace "
                    "{params.workdir}/{wildcards.pruning}_r"+str(length)+"_k{wildcards.k}_o{wildcards.omega}_red{wildcards.reduction}_ar{wildcards.arsoft}_rappas.jplace "
                )